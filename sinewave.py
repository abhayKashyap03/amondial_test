# -*- coding: utf-8 -*-
"""sinewave.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12qA0ux1mHLCLUlEuxNpybmsQcXX0jd-1

## Training and prediction made on uniform data taken from 0 to 172 with 1460 data points
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np

try :
#   %tensorflow_version 2.x
except :
  pass
import tensorflow as tf
import tensorflow.keras.layers as layers
import matplotlib.pyplot as plt

t = np.linspace(0, 172, 1460)
x = np.sin(t)
plt.plot(x)

from sklearn.preprocessing import MinMaxScaler

normalizer = MinMaxScaler(feature_range=(0, 1))
x = (np.reshape(x, (-1, 1)))
x = normalizer.fit_transform(x)
print(x)

x = np.reshape(x, (-1, 1))

train = x[0:1200]
test = x[1200:]

def createDataset(data, step):
    X, Y =[], []
    for i in range(len(data)-step): 
        X.append(data[i:i+step])
        Y.append(data[i+step])
    return np.array(X), np.array(Y)
'''
step = 10
trainX, trainY = createDataset(train, step)
testX, testY = createDataset(test, step)
print(trainX[0])'''

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM

model = Sequential()

model.add(LSTM(1024, return_sequences=True, activation="tanh"))
model.add(LSTM(1024, return_sequences=True, activation="tanh"))
model.add(LSTM(512, return_sequences=True, activation="tanh"))
model.add(LSTM(128, return_sequences=True, activation="tanh"))
model.add(LSTM(1, activation="tanh"))

model.compile(loss='mean_squared_error', optimizer='rmsprop')

model.fit(trainX, trainY, epochs=100, batch_size=16, verbose=1)

pred = model.predict(testX)

df = pd.DataFrame(x[:1210])
p = pd.DataFrame(pred)
index = [i for i in range(len(x))]
p.index = index[1210:]

plt.figure(figsize=(10, 3))
plt.plot(df, label='original')
plt.plot(p, label='predicted')
plt.legend(loc="center right")

"""***

## Prediction on dataset of 5000 values
"""

# import dataset here

from google.colab import files
files.upload()

x = pd.read_csv('sinewave.csv') # substitute 'sinewave.csv' with the name of your dataset

plt.plot(x)

x = np.asarray(x['sinewave'].values) # substitute 'sinewave' with name of the column in your dataset

# Normalizing data

x = (np.reshape(x, (-1, 1)))
x = normalizer.fit_transform(x)
x

plt.plot(x)

x = np.reshape(x, (-1, 1))
x

# Change values for testing and training size to your custom values

train = x[0:1200]
test = x[1200:]

step = 10 # change step value to your custom value
trainX, trainY = createDataset(train, step)
testX, testY = createDataset(test, step)
print(trainX[0])

model.fit(trainX, trainY, epochs=100, batch_size=16, verbose=1)

pred_on_dataset = model.predict(testX)

df = pd.DataFrame(x[:1210]) # change value here - '1210' to value of your choice
p = pd.DataFrame(pred_on_dataset)
index = [i for i in range(len(x))]
p.index = index[1210:] # change value here - '1210' to value of your choice

plt.figure(figsize=(10, 3))
plt.plot(df, label='original')
plt.plot(p, label='predicted')
plt.legend(loc="center right")

"""### Training with 1200 datapoints and predicting 260 future values"""

y = x[:1460]

train2 = y[:1200]
test2 = y[1200:]

xtrain, ytrain = createDataset(train2, 10)
xtest, ytest = createDataset(test2, 10)

model.fit(xtrain, ytrain, epochs=100)
pred2 = model.predict(xtest)

plt.figure(figsize=(10, 7))
plt.plot(pd.DataFrame(pred2, index=[i for i in range(1210, 1460)]))
plt.plot(y[:1211])
plt.legend(['Predicted', 'History'])

