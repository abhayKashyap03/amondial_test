# -*- coding: utf-8 -*-
"""stock_predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KnvemKs6GX2m8sSg3Hy4dc3bA5NkAEHf
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np

try :
#   %tensorflow_version 2.x
except :
  pass
import tensorflow as tf
import tensorflow.keras.layers as layers
import matplotlib.pyplot as plt

from google.colab import files
files.upload()

df = pd.read_csv("AAPL.csv")

df

df = df['Close']
df

plt.plot(df)

plt.plot(df[-1460:])

df[df.isna()==True]
df = df.drop(axis=0, index=165)
df.index = [i for i in range(df.shape[0])]
# execute code cell only if any NaN values present in the data

data = df.to_numpy()
data

from sklearn.preprocessing import MinMaxScaler

normalizer = MinMaxScaler(feature_range=(0, 1))
data = (np.reshape(data, (-1, 1)))
data = normalizer.fit_transform(data)
print(data)

data = np.reshape(data, (-1, 1))

train = data[:4899]
test = data[4899:]

def createDataset(data, step):
    X, Y =[], []
    for i in range(len(data)-step): 
        X.append(data[i:i+step])
        Y.append(data[i+step])
    return np.array(X), np.array(Y)
 
step = 10
trainX, trainY = createDataset(train, step)
testX, testY = createDataset(test, step)
print(trainX[0])

model = tf.keras.Sequential()

model.add(layers.LSTM(128, activation="tanh"))
model.add(layers.Dropout(0.025))
model.add(layers.Dense(1))

model.compile(loss='mean_squared_error', optimizer='rmsprop')

model.fit(trainX, trainY, epochs=100, batch_size=16)

pred = model.predict(testX)
plt.plot(pred)
plt.plot(testY)

print(trainX.shape, testX.shape, pred.shape)

plt.figure(figsize=(10, 7))
plt.plot(trainX[:, 0], label='History')
plt.plot(pd.DataFrame(data[-1], index=[9797]), label='True Future', marker='*')
plt.plot(pd.DataFrame(pred, index=[i for i in range(4908, 9796)]), label='Prediction')
plt.plot(pd.DataFrame(pred[-1], index=[9797]), label='Predicted Future', marker='x')
# plt.plot(pd.DataFrame(testY, index=df[9010:].index), label='test actual')
plt.legend(loc='upper left', fontsize='medium')

# testY and data[9010:] are the same values.

"""### Training on 1200 datapoints and predicting 260 days into future"""

df = df[-1460:]

data = df.to_numpy()
data

data = (np.reshape(data, (-1, 1)))
data = normalizer.fit_transform(data)
print(data)

df.index = [i for i in range(0, 1460)]

data = np.reshape(data, (-1, 1))

data

train = data[:1200]
test = data[1200:]

step = 10
trainX, trainY = createDataset(train, step)
testX, testY = createDataset(test, step)
print(trainX[0])

model.fit(trainX, trainY, epochs=100, batch_size=16, verbose=1)

pred = model.predict(testX)
plt.plot(pred)
plt.plot(testY)

plt.figure(figsize=(10, 7))
plt.plot(data[:1210], label='History')
plt.plot(pd.DataFrame(data[-1], index=[1460]), label='True Future', marker='*')
plt.plot(pd.DataFrame(pred, index=[i for i in range(1210, 1460)]), label='Prediction')
plt.plot(pd.DataFrame(pred[-1], index=[1460]), label='Predicted Future', marker='x')
# plt.plot(pd.DataFrame(testY, index=df[9010:].index), label='test actual')
plt.legend(loc='upper left', fontsize='medium')

# testY and data[9010:] are the same values.

